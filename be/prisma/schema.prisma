generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id                   Int            @id @default(autoincrement()) @map("id")
  name                 String
  email                String         @unique
  password             String?
  avatar               String?
  role                 Role           @default(USER)
  emailVerified        Boolean        @default(false)
  resetPasswordToken   String?        @unique
  resetPasswordExpires DateTime?
  facebookToken        String?        
  facebookTokenExpiry  DateTime?
  linkedInAccessToken  String?
  linkedInExpiresAt    DateTime?
  linkedInId           String?
  linkedInRefreshToken String?
  posts                Post[]
  organizations        Organization[]
  refreshTokens        RefreshToken[]
  createdAt            DateTime       @default(now()) @map("created_at")
  updatedAt            DateTime       @default(now()) @updatedAt @map("updated_at")

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid()) @map("id")
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("refresh_tokens")
}

// Organization details modal take so many info so that i can give ai so ai can generate post content company basis
model Organization {
  id            Int        @id @default(autoincrement()) @map("id")
  name          String
  website       String?
  category      String?
  location      String?
  description   String?
  established   String?
  size          String?
  employees     String?
  turnover      String?
  revenue       String?
  profit        String?
  marketArea    String?
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @default(now()) @updatedAt @map("updated_at")
  userId        Int
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("organizations")
}

model Post {
  id          Int        @id @default(autoincrement()) @map("id")
  content     String
  mediaUrl    String?
  platformId  String?
  platform    Platform
  publishedAt DateTime?
  status      PostStatus @default(DRAFT)
  engagement  Json?
  userId      Int
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @default(now()) @updatedAt @map("updated_at")
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([platform, publishedAt])
  @@map("posts")
}

enum Role {
  USER
  ADMIN
}

enum Platform {
  FACEBOOK
  LINKEDIN
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
}
